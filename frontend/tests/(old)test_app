#     def test_update_get(self):
        # with requests_mock.Mocker() as m:
        #     m.get(f"http://{backend_host}/read/vgdb/1", json=all_games)
        #     response = self.client.get(url_for('update_game'))
        #     self.assert200(response)

# class TestRead(TestBase):

#     def test_read_home_tasks(self):
#         response = self.client.get(url_for('home'))
#         self.assertIn(b"Run unit tests", response.data) # In is there
    
# class TestCreate(TestBase):
#     def test_create_task(self):
#         response = self.client.post(
#             url_for('create_task'),
#             data={"desc": "Testing create task"},
#             follow_redirects=True
#             )
#         self.assertIn(b"Testing create task", response.data)

# class TestUpdate(TestBase):
#     def test_update_task(self):
#         response = self.client.post(
#             url_for('update_task', id=1),
#             data={"desc": "Testing update task"},
#             follow_redirects=True
#             )
#         self.assertIn(b"Testing update task", response.data)

# class TestDelete(TestBase):
#     def test_delete_task(self):
#         response = self.client.get(
#             url_for("delete", id=1),
#             follow_redirects=True
#         )
#         self.assertNotIn(b"Run unit tests", response.data) # NotIn meaning deleted